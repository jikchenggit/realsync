#!/bin/ksh

if [ -z "${REALSYNC_BASE}" ]
then
  cd ..
  REALSYNC_BASE=`pwd`
fi

Usage()
{
  echo "    ************************************************************************************"
  echo "    USAGE: switch ROLE_TYPE "
  echo "           ROLE_TYPE : src(SRC) or tgt(TGT)"
  echo "                                          "
  echo "    ************************************************************************************"
  exit
}

#check source xf1 send status
xf1_send_check()
{
 echo "Check $1 xf1 sender status..."
 if [ -f $REALSYNC_BASE/xldr/$1/2.cfg.senderno ]
 then
     SEND_1=`cat $REALSYNC_BASE/xldr/$1/2.cfg.senderno |awk '{print $1}'`
     SEND_2=`cat $REALSYNC_BASE/xldr/$1/2.cfg.senderno |awk '{print $2}'`
     while [ "$SEND_1" != "$SEND_2" ]
     do
       echo "$1 xf1 cache file sender do not finish,retry check after 3s ..."
       sleep 3
       SEND_1=`cat $REALSYNC_BASE/xldr/$1/2.cfg.senderno |awk '{print $1}'`
       SEND_2=`cat $REALSYNC_BASE/xldr/$1/2.cfg.senderno |awk '{print $2}'`
     done
     echo "$1 xf1 cache file sender finished."
 else
     echo "$1 no real xf1 cache file send"
 fi
}

#check target xf1 load status
xf1_load_check()
{
 R_NUM=`grep LOADER_R_PARALLEL $REALSYNC_BASE/config/$1/config.dsg |awk -F= '{print $2}'`
 if [ -z "${R_NUM}" ]
 then
     R_NUM=1
 fi
 R_CNT=0
 while [ ${R_CNT} -lt ${R_NUM} ]
 do 
   echo "Check $1 real${R_CNT} loader status..."
   if [ -f $REALSYNC_BASE/xldr/$1/real${R_CNT}/cfg.loaderno ]
   then
       LOAD_1=`cat $REALSYNC_BASE/xldr/$1/real${R_CNT}/cfg.loaderno |awk '{print $1}'`
       LOAD_2=`cat $REALSYNC_BASE/xldr/$1/real${R_CNT}/cfg.loaderno |awk '{print $2}'`
       while [ "$LOAD_1" != "$LOAD_2" ]
       do
         echo "$1 real${R_CNT} loader do not finish,retry check after 3s ..."
         sleep 3
         LOAD_1=`cat $REALSYNC_BASE/xldr/$1/real${R_CNT}/cfg.loaderno |awk '{print $1}'`
         LOAD_2=`cat $REALSYNC_BASE/xldr/$1/real${R_CNT}/cfg.loaderno |awk '{print $2}'`
       done
       echo "$1 real${R_CNT} loader finished."
   else
       echo "$1 real${R_CNT} no real loader"
   fi
   let R_CNT=R_CNT+1
 done
}

#stop process,source or target
stop_process()
{
 cd $REALSYNC_BASE/scripts
 ./stop_vagentd $1
}

#start process,source or target
start_process()
{
 cd $REALSYNC_BASE/scripts
 ./start_vagentd $1
}

#restart rmp process
restart_rmp()
{
 echo "Restart $1 rmp process..."
 cd $REALSYNC_BASE/scripts
 ./stop_rmp $1
 ./start_rmp $1
 echo "Restart OK."
}

#switch redo log
switch_redo_log()
{
echo "Switch db redo log..."
sqlplus -s "/as sysdba" <<EOF
alter system switch all logfile;
alter system switch logfile;
EOF
echo "Switch OK."
}

#get scn
get_scn()
{
sqlplus -s "/as sysdba" <<EOF
set pagesize 0
set feedback off
select 'set dm 1.1 -cfg -type ds '||first_change#||' -sync r' from v\$log a, v\$instance b 
where a.thread#=b.thread# and a.status='CURRENT';
EOF
}

#start real sync us scn
start_real()
{
  echo "Start reverse real sync..."
  cd $REALSYNC_BASE/scripts
  ./reload $1
  echo "Start OK."
}

#get enable job/trigger sql
get_enable_sql()
{
cd $REALSYNC_BASE/scripts
sqlplus -s "/as sysdba" <<EOF
set pagesize 0
set feedback off
select 'alter trigger "'||owner||'"."'||trigger_name||'" enable;' 
from dba_triggers where owner not in ('SYS','SYSTEM') and status='ENABLED';

select 'exec sys.dbms_ijob.broken('||job||',false);'||chr(10)||'commit;' 
from dba_jobs where SCHEMA_USER not in ('SYS','SYSTEM') and broken='N';

select 'exec dbms_scheduler.enable('''||owner||'.'||job_name||''');' 
from dba_scheduler_jobs where owner not in ('SYS','SYSTEM') and enabled='TRUE';
EOF
}

#get disable job/trigger sql
get_disable_sql()
{
cd $REALSYNC_BASE/scripts
sqlplus -s "/as sysdba" <<EOF
set pagesize 0
set feedback off
select 'alter trigger "'||owner||'"."'||trigger_name||'" disable;' 
from dba_triggers where owner not in ('SYS','SYSTEM') and status='ENABLED';

select 'exec sys.dbms_ijob.broken('||job||',true);'||chr(10)||'commit;' 
from dba_jobs where SCHEMA_USER not in ('SYS','SYSTEM') and broken='N';

select 'exec dbms_scheduler.disable('''||owner||'.'||job_name||''');' 
from dba_scheduler_jobs where owner not in ('SYS','SYSTEM') and enabled='TRUE';
EOF
}

#disable job and trigger
disable_job_trigger()
{
echo "Disable job and trigger..."
cd $REALSYNC_BASE/scripts
sqlplus -s "/as sysdba" <<EOF
@disable_job_trigger.sql;
EOF
echo "Disable OK."
}

#enable job and trigger
enable_job_trigger()
{
cd $REALSYNC_BASE/scripts
echo "Enable job and trigger"
sqlplus -s "/as sysdba" <<EOF
@enable_job_trigger.sql;
EOF
echo "Enable OK."
}

switch_src()
{
 for h in `cat $REALSYNC_BASE/config.srv | grep -v "#" |grep -w "SRC" | awk '{print $1}'`
 do
   xf1_send_check $h
   stop_process $h
   if [ -f $REALSYNC_BASE/vcfsa/$h/vcfs_dc.db ]
   then
       mv $REALSYNC_BASE/vcfsa/$h/vcfs_dc.db $REALSYNC_BASE/vcfsa/$h/vcfs_dc.db.bak1
   fi
   if [ `echo $h |awk -F_ '{print $1}'` = "r" ]
   then
       R_SVR_NAME=`echo $h |awk '{print substr($1,3)}'`
   else
       R_SVR_NAME="r_${h}"
   fi
   start_process $R_SVR_NAME
   restart_rmp $R_SVR_NAME
 done
 echo "Get enable job/trigger sql to enable_job_trigger.sql..."
 get_enable_sql > enable_job_trigger.sql
 echo "Get OK."
 echo "Get disable job/trigger sql disalbe_job_trigger.sql..."
 get_disable_sql > disable_job_trigger.sql
 echo "Get OK."
 disable_job_trigger
}

switch_tgt()
{
 for h in `cat $REALSYNC_BASE/config.srv | grep -v "#" |grep -w "TGT" | awk '{print $1}'`
 do
   xf1_load_check $h
   stop_process $h
   if [ `echo $h |awk -F_ '{print $1}'` = "r" ]
   then
       R_SVR_NAME=`echo $h |awk '{print substr($1,3)}'`
   else
       R_SVR_NAME="r_${h}"
   fi
   start_process $R_SVR_NAME
   restart_rmp $R_SVR_NAME
 done
 switch_redo_log
 for h in `cat $REALSYNC_BASE/config.srv | grep -v "#" |grep -w "TGT" | awk '{print $1}'`
 do
   if [ `echo $h |awk -F_ '{print $1}'` = "r" ]
   then
       R_SVR_NAME=`echo $h |awk '{print substr($1,3)}'`
   else
       R_SVR_NAME="r_${h}"
   fi
   if [ -f $REALSYNC_BASE/config/$R_SVR_NAME/config.vm ]
   then
       mv $REALSYNC_BASE/config/$R_SVR_NAME/config.vm $REALSYNC_BASE/config/$R_SVR_NAME/config.vm.`date +%Y%m%d%H%M%S`
   fi
   #echo "Get current scn"
   #get_scn > $REALSYNC_BASE/config/$R_SVR_NAME/config.vm
   echo "set dm 1.1 -cfg -sync r" > $REALSYNC_BASE/config/$R_SVR_NAME/config.vm
   cat $REALSYNC_BASE/config/$R_SVR_NAME/config.vm
   cat $REALSYNC_BASE/config/$R_SVR_NAME/mapping.ini
   start_real $R_SVR_NAME
 done
 enable_job_trigger
}


if [ $# -lt 1 ]
then
  Usage
fi

ROLE_TYPE="$1"

if [ "${ROLE_TYPE}" != "src" -a "${ROLE_TYPE}" != "SRC" -a "${ROLE_TYPE}" != "tgt" -a "${ROLE_TYPE}" != "TGT" ]
then
    Usage
fi

echo "List ${ROLE_TYPE} service name:"
if [ "${ROLE_TYPE}" = "src" -o "${ROLE_TYPE}" = "SRC" ]
then
    cat $REALSYNC_BASE/config.srv |grep -v "TGT"
fi
if [ "${ROLE_TYPE}" = "tgt" -o "${ROLE_TYPE}" = "TGT" ]
then
    cat $REALSYNC_BASE/config.srv |grep -v "SRC"
fi

read OPTION?"Do you really want to switch ${ROLE_TYPE}, (Y/N):" 
while true
do
  if [ "$OPTION" != "Y" -a "$OPTION" != "y" -a "$OPTION" != "N" -a "$OPTION" != "n" ] 
  then
      read OPTION?"Do you really want to switch ${ROLE_TYPE}, (Y/N):" 
  else
      break
  fi
done
if [ "$OPTION" = "Y" -o "$OPTION" = "y" ]
then
    echo "Begin switch ${ROLE_TYPE}"
    if [ "${ROLE_TYPE}" = "src" -o "${ROLE_TYPE}" = "SRC" ]
    then
        switch_src
    fi
    if [ "${ROLE_TYPE}" = "tgt" -o "${ROLE_TYPE}" = "TGT" ]
    then
        switch_tgt
    fi
    echo "End switch ${ROLE_TYPE}"
fi
if [ "$OPTION" = "N" -o "$OPTION" = "n" ]
then
  echo "No switch ${ROLE_TYPE}"
  exit
fi


